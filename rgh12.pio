;
; RGH 1.2 CPLD replication for Raspberry Pi Pico
; Synchronized to an external clock.
;
.program rgh12

; Define pin locations to match the C code
.define POST_PIN 0
.define RESET_PIN 1
.define GLITCH_OUT_PIN 2

.wrap_target
main_loop:
    ; --- Arming Sequence: Pull timing config from CPU ---
    pull block          ; Pull POST_COUNT into OSR
    mov x, osr          ; Store POST_COUNT in X
    pull block          ; Pull GLITCH_OFFSET into OSR
    mov y, osr          ; Store GLITCH_OFFSET in Y
    pull block          ; Pull GLITCH_WIDTH into OSR

    ; --- Wait for Boot Cycle to begin (RESET line goes high) ---
wait_reset_high:
    jmp pin, post_counter ; If RESET is high, start counting
    jmp wait_reset_high   ; Otherwise, wait here

    ; --- POST Counting Sequence ---
post_counter:
    ; Wait for a full toggle (low then high) on the POST_PIN
    wait 0 pin POST_PIN
    wait 1 pin POST_PIN

    ; If reset drops mid-count, abort and re-arm the glitcher
    jmp !pin, main_loop
    ; Decrement counter and loop if not finished
    jmp x--, post_counter

    ; --- Glitch Execution ---
    ; POST count finished. Now wait for the offset period.
glitch_offset:
    jmp y--, glitch_offset  ; Decrement Y each clock cycle

    ; Fire the pulse. OSR holds the width value.
    mov pins, 0             ; Drive GLITCH_OUT pin LOW
glitch_width:
    mov pins, 0             ; Keep pin low
    jmp x--, glitch_width   ; Loop using X (reloaded from OSR) for width duration

    ; --- End of Cycle ---
    ; Pulse finished. Pin returns high via 'set' config.
    ; Wait for reset to go low, indicating the boot attempt is over.
wait_reset_low:
    jmp pin, wait_reset_low ; Wait if reset is still high
    jmp main_loop           ; Reset is low, loop back to the start to re-arm
.wrap
